#!/usr/bin/env python3
"""
Test script to see what ARIMA model is actually generated by the system
"""

import os
import sys
import django
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'medicine_ordering_system.settings')
django.setup()

from pmdarima import auto_arima
from analytics.services import ARIMAForecastingService
from inventory.models import Medicine

def test_actual_model():
    """Test what ARIMA model is actually generated"""
    
    print("🔍 Testing Actual ARIMA Model Generation")
    print("=" * 50)
    
    # Get Metformin data
    service = ARIMAForecastingService()
    medicine = Medicine.objects.get(name__icontains='Metformin')
    
    # Prepare data
    df = service.prepare_sales_data(medicine.id, 'monthly')
    ts_data = df.set_index('date')['quantity']
    
    print(f"Data shape: {ts_data.shape}")
    print(f"Date range: {ts_data.index.min()} to {ts_data.index.max()}")
    print(f"Non-zero values: {(ts_data > 0).sum()}")
    print()
    
    # Run Auto ARIMA with system configuration
    print("Running Auto ARIMA with system configuration...")
    model = auto_arima(
        ts_data,
        start_p=0, start_q=0,
        max_p=5, max_q=5,
        seasonal=True,
        m=12,
        start_P=0, start_Q=0,
        max_P=2, max_Q=2,
        stepwise=True,
        suppress_warnings=True,
        error_action='ignore',
        trace=True  # Show the search process
    )
    
    print()
    print("=" * 50)
    print("ACTUAL MODEL RESULTS:")
    print("=" * 50)
    print(f"Model Order: {model.order}")
    print(f"Seasonal Order: {model.seasonal_order}")
    print(f"AIC: {model.aic():.2f}")
    print(f"BIC: {model.bic():.2f}")
    # print(f"Log-Likelihood: {model.loglikelihood():.2f}")  # Not available in pmdarima
    
    # Get the full model specification
    print()
    print("FULL MODEL SPECIFICATION:")
    print(f"ARIMA{model.order}{model.seasonal_order}")
    
    # Show model summary
    print()
    print("MODEL SUMMARY:")
    print(model.summary())

if __name__ == "__main__":
    test_actual_model()
